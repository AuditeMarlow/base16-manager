#!/usr/bin/env sh
SCRIPT=$(readlink -f "$0")
SCRIPTPATH=$(dirname $SCRIPT)
SCRIPTNAME="$0"
CONFIGPATH="$HOME/.base16-manager"
PACKAGES=$(find $CONFIGPATH -maxdepth 2 -mindepth 2 -type d -printf "%P\n")

usage() {
    echo "Usage: base16-manager [option]"
    echo "Options:"
    echo "   add          'username/repository'  Installs a Github repository"
    echo "   remove       'username/repository'  Removes a Github repository"
    echo "   list                                Lists installed repositories"
    echo "   update                              Updates insatlled repositories"
    echo "   set          'base16-scheme'        Sets the new colorscheme"
    echo "   clean                               Cleans out leftovers"
    echo "   self-update                         Updates this script"
}

check_dir() {
    if [ ! -d $1 ]; then
        mkdir $1
    fi
}

check_file() {
    if [ ! -f $2 ]; then
        echo "Configuration file for $1 not found"
        exit 1
    fi
}

check_arg() {
    if [ "$1" == "" ]; then
        usage
        exit 1
    fi }

add() {
    check_dir $CONFIGPATH
    git clone "https://github.com/$1" "$CONFIGPATH/$1"
}

remove() {
    rm -rf "$CONFIGPATH/$1"
    echo "Removed $1."
}

list() {
    echo "$PACKAGES"
}

update() {
    echo "update stub"
}

clean() {
    find $CONFIGPATH -maxdepth 1 -type d -empty -delete
    check_dir $CONFIGPATH # Apparently I need to remake the directory if all folders are empty
    echo "Cleaned up $CONFIGPATH."
}

self_update() {
    cd "$SCRIPTPATH"
    mv "base16-manager" "base16-manager.old"
    curl -o "base16-manager" "https://raw.githubusercontent.com/AuditeMarlow/base16-manager/master/base16-manager"
    chmod +x "base16-manager"
    echo "Updated base16-manager."
}

# This'll be the most work
set_theme() {
    THEME=$1

    for PACKAGE in $PACKAGES
    do
        case $PACKAGE in
            "chriskempson/base16-shell")
                set_shell $PACKAGE $THEME
                ;;
            "chriskempson/base16-vim")
                set_vim $PACKAGE $THEME
                ;;
            "chriskempson/base16-xresources")
                set_xresources $PACKAGE $THEME
                ;;
            "0xdec/base16-rofi")
                set_rofi $PACKAGE $THEME
                ;;
            *)
                echo "Package $PACKAGE is not yet supported."
                ;;
        esac
    done

    echo "Set theme to $1. You may need to restart DE."
}

set_fzf() {
    # cp fzf file to $HOME/.fzf.colors, check if it is sourced in
    # .bashrc and/or .zshrc, add to file if it isn't
    echo "set_fzf stub"
}

set_rofi() {
    THEME="$CONFIGPATH/$1/themes/base16-$2.config"
    check_file $1 $THEME
    cp "$THEME" "$HOME/.config/rofi/config"
}

set_shell() {
    HELPER="$CONFIGPATH/$1/profile_helper.sh"
    THEME="$CONFIGPATH/$1/scripts/base16-$2.sh"
    check_file $1 $THEME
    eval "$($HELPER)"
    _base16 "$THEME"
}

set_xresources() {
    THEME="$CONFIGPATH/$1/xresources/base16-$2.Xresources"
    check_file $1 $THEME
    cp "$THEME" "$HOME/.Xresources.d/colors"
    xrdb -load "$HOME/.Xresources"
}

set_vim() {
    # The idea is to loop through all vim config files in search for
    # `colorscheme` or `colo`, remove that line and add a new one in
    # the same file with `colorscheme <theme>`.
    echo "set_vim stub"
}

main() {
    if [ $# -eq 0 ]; then
        usage
        exit 0
    fi

    OPTION=$1

    shift

    case $OPTION in
        "add"        ) check_arg "$1"; add "$1";;
        "remove"     ) check_arg "$1"; remove "$1";;
        "list"       ) list;;
        "update"     ) update;;
        "set"        ) check_arg "$1"; set_theme "$1";;
        "clean"      ) clean;;
        "self-update") self_update;;
        *            ) usage;;
    esac

    exit 0
}

main "$@"
