#!/bin/bash
#
# Install, remove, update base16 templates and set themes globally.

readonly SCRIPT_NAME="$0"
readonly SCRIPT=$(readlink -f "${SCRIPT_NAME}")
readonly SCRIPT_PATH=$(dirname ${SCRIPT})
readonly CONFIG_PATH="${HOME}/.base16-manager"

err() {
  echo "$@" >&2
  exit 2
}

usage() {
  echo "Usage: base16-manager [option]"
  echo "Options:"
  echo "   install      'username/repository'  Installs a template repository"
  echo "   remove       'username/repository'  Removes a template repository"
  echo "   list                                Lists installed templates"
  echo "   update                              Updates insatlled templates"
  echo "   set          'base16-theme'         Sets the new theme"
  echo "   clean                               Cleans up leftovers"
  echo "   self-update                         Updates this script"
}

dir_exists() {
  local dir=$1

  [[ -d "${dir}" ]] && true || false
}

file_exists() {
  local file=$1

  [[ -f "${file}" ]] && true || false
}

check_dir() {
  local dir=$1

  if ! dir_exists "${dir}"; then
    mkdir "${dir}"
  fi
}

check_file() {
  local file=$1

  if  ! file_exists "${file}"; then
    err "File '${file}' not found."
  fi
}

check_arg() {
  local arg=$1

  if [[ -z "${arg}" ]]; then
    usage
    exit 0
  fi
}

install() {
  local template=$1
  local repository="https://github.com/${template}"

  check_dir ${CONFIG_PATH}

  if ! git ls-remote --exit-code -h "${repository}" > /dev/null; then
    err "Template repository not found."
  fi

  git clone "${repository}" "$CONFIG_PATH/${template}"
}

remove() {
  local template=$1

  check_dir "${CONFIG_PATH}/${template}"

  rm -rf "${CONFIG_PATH}/${template}"
  echo "Removed ${template}."
}

list() {
  find ${CONFIG_PATH} -maxdepth 2 -mindepth 2 -type d -printf "%P\n"
}

update() {
  echo "update stub"
}

clean() {
  find ${CONFIG_PATH} -maxdepth 1 -type d -empty -delete

  check_dir ${CONFIG_PATH}

  echo "Cleaned up ${CONFIG_PATH}."
}

self_update() {
  cd "${SCRIPT_PATH}"
  mv "base16-manager" "base16-manager.old"

  curl -o "base16-manager" \
    "https://raw.githubusercontent.com/AuditeMarlow/base16-manager/master/base16-manager"

  chmod +x "base16-manager"

  echo "Updated base16-manager."
}

set_theme() {
  local theme=$1
  local packages=$(list)

  if [[ -z "${packages}" ]]; then
    err "No packages installed."
    exit 0
  fi

  for package in ${packages}; do
    case "${package}" in
      "chriskempson/base16-shell")
        set_shell ${package} ${theme}
        ;;
      "chriskempson/base16-vim")
        set_vim ${package} ${theme}
        ;;
      "chriskempson/base16-xresources")
        set_xresources ${package} ${theme}
        ;;
      "0xdec/base16-rofi")
        set_rofi ${package} ${theme}
        ;;
      "nicodebo/base16-fzf")
        set_fzf ${package} ${theme}
        ;;
      *)
        err "Package ${package} is not (yet) supported."
        ;;
    esac
  done

  echo "Set theme to ${theme}. You may need to restart DE and terminals."
}

set_fzf() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/build_scheme/base16-${theme}.config"
  local line="[ -f ~/.fzf.colors ] && source ~/.fzf.colors"
  local rcs="$HOME/.bashrc $HOME/.zshrc"

  check_file ${file}

  cp "${file}" "${HOME}/.fzf.colors"

  for rc in ${rcs}
  do
    if ! grep -Fxq "${line}" "${rc}"; then
      echo "${line}" >> "${rc}"
    fi
  done

  source "${HOME}/.fzf.colors"
}

set_rofi() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/themes/base16-${theme}.config"

  check_file ${file}

  cp "${file}" "${HOME}/.config/rofi/config"
}

set_shell() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/scripts/base16-${theme}.sh"
  local helper="${CONFIG_PATH}/${package}/profile_helper.sh"

  check_file ${helper}
  check_file ${file}

  eval "$(${helper})"
  _base16 "${file}"
}

set_vim() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/colors/base16-${theme}.vim"
  local vim_files="${HOME}/.vimrc ${HOME}/.config/nvim/init.vim"

  check_file ${file}

  for vim_file in ${vim_files}; do
    if file_exists "${vim_file}"; then
      grep -Evx "(colorscheme|colo).*" "${vim_file}" > /tmp/vim_config
      rm "${vim_file}.bac"
      mv "${vim_file}" "${vim_file}.bac"
      mv /tmp/vim_config "${vim_file}"
      echo "colorscheme base16-${theme}" >> "${vim_file}"
    fi
  done
}

set_xresources() {
  local package=$1
  local theme=$2
  local file="${CONFIG_PATH}/${package}/xresources/base16-${theme}.Xresources"

  check_file ${file}

  cp "${file}" "${HOME}/.Xresources.d/colors"

  # TODO: Check if ~/.Xresources includes colors file.
  xrdb -load "$HOME/.Xresources"
}

main() {
  check_dir ${CONFIG_PATH}

  local option=$1
  local arg=$2

  if [[ -z "${option}" ]]; then
    usage
    exit 0
  fi

  case ${option} in
    "install")
      check_arg "${arg}"
      install "${arg}"
      ;;
    "remove")
      check_arg "${arg}"
      remove "${arg}"
      ;;
    "list")
      list
      ;;
    "update")
      update
      ;;
    "set")
      check_arg "${arg}"
      set_theme "${arg}"
      ;;
    "clean")
      clean
      ;;
    "self-update")
      self_update
      ;;
    *)
      usage
      ;;
  esac

  exit 0
}

main "$@"
